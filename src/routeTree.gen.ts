/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as ErrorIndexImport } from './routes/error/index'
import { Route as ProductsPidImport } from './routes/products/$pid'
import { Route as ProductsCatCategoryImport } from './routes/products/cat.$category'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const ErrorIndexRoute = ErrorIndexImport.update({
  id: '/error/',
  path: '/error/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsPidRoute = ProductsPidImport.update({
  id: '/products/$pid',
  path: '/products/$pid',
  getParentRoute: () => rootRoute,
} as any)

const ProductsCatCategoryRoute = ProductsCatCategoryImport.update({
  id: '/products/cat/$category',
  path: '/products/cat/$category',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/products/$pid': {
      id: '/products/$pid'
      path: '/products/$pid'
      fullPath: '/products/$pid'
      preLoaderRoute: typeof ProductsPidImport
      parentRoute: typeof rootRoute
    }
    '/error/': {
      id: '/error/'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof ErrorIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/cat/$category': {
      id: '/products/cat/$category'
      path: '/products/cat/$category'
      fullPath: '/products/cat/$category'
      preLoaderRoute: typeof ProductsCatCategoryImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/products/$pid': typeof ProductsPidRoute
  '/error': typeof ErrorIndexRoute
  '/login': typeof LoginIndexRoute
  '/products': typeof ProductsIndexRoute
  '/products/cat/$category': typeof ProductsCatCategoryRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/products/$pid': typeof ProductsPidRoute
  '/error': typeof ErrorIndexRoute
  '/login': typeof LoginIndexRoute
  '/products': typeof ProductsIndexRoute
  '/products/cat/$category': typeof ProductsCatCategoryRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/products/$pid': typeof ProductsPidRoute
  '/error/': typeof ErrorIndexRoute
  '/login/': typeof LoginIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/products/cat/$category': typeof ProductsCatCategoryRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/products/$pid'
    | '/error'
    | '/login'
    | '/products'
    | '/products/cat/$category'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/products/$pid'
    | '/error'
    | '/login'
    | '/products'
    | '/products/cat/$category'
  id:
    | '__root__'
    | '/'
    | '/products/$pid'
    | '/error/'
    | '/login/'
    | '/products/'
    | '/products/cat/$category'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProductsPidRoute: typeof ProductsPidRoute
  ErrorIndexRoute: typeof ErrorIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
  ProductsCatCategoryRoute: typeof ProductsCatCategoryRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProductsPidRoute: ProductsPidRoute,
  ErrorIndexRoute: ErrorIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
  ProductsCatCategoryRoute: ProductsCatCategoryRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/products/$pid",
        "/error/",
        "/login/",
        "/products/",
        "/products/cat/$category"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/products/$pid": {
      "filePath": "products/$pid.tsx"
    },
    "/error/": {
      "filePath": "error/index.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/products/": {
      "filePath": "products/index.tsx"
    },
    "/products/cat/$category": {
      "filePath": "products/cat.$category.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
